{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","images/discord-logo.png","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","prompt","add","fontSize","Avatar","signOut","src","photo","displayName","uid","substring","ChatHeader","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","value","disabled","onChange","e","target","preventDefault","FieldValue","serverTimestamp","type","Login","Logo","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","console","log","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfb85cbb.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = state => state.app.channelId;\r\nexport const selectChannelName = state => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n\r\n","import React from 'react'\r\nimport \"./SidebarChannel.css\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { setChannelInfo } from './features/appSlice';\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div className=\"sidebarChannel\" onClick={() => dispatch(setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName\r\n        }))}>\r\n            <h4><span className=\"sidebarChannel__hash\">#</span>{channelName}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from \"firebase\";\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBBwmYwYX96kOonsndiGm1I4HcwLsaouRQ\",\r\n  authDomain: \"discord-clone-39004.firebaseapp.com\",\r\n  projectId: \"discord-clone-39004\",\r\n  storageBucket: \"discord-clone-39004.appspot.com\",\r\n  messagingSenderId: \"271268621555\",\r\n  appId: \"1:271268621555:web:3cfc6938d1ebe77fc61b86\",\r\n  measurementId: \"G-P2T1N987Y0\"\r\n};\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useState, useEffect } from 'react'\r\nimport \"./Sidebar.css\"\r\nimport SidebarChannel from \"./SidebarChannel\"\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadSetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useSelector } from \"react-redux\"\r\nimport { selectUser } from \"./features/userSlice\"\r\nimport db, { auth } from \"./firebase\"\r\n\r\n\r\nfunction Sidebar() {\r\n    const user = useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);\r\n\r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot(snapshot => {\r\n            setChannels(snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                channel: doc.data()\r\n            })))\r\n        })\r\n    }, [])\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt(\"Please Enter Channel Name.\");\r\n\r\n        if (channelName) {\r\n            db.collection('channels').add({\r\n                channelName: channelName,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='sidebar'>\r\n            <div className=\"sidebar__top\">\r\n                <h3>Chat 1</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\"></AddIcon>\r\n                </div>\r\n\r\n                <div className=\"sidebar__channelsList\">\r\n                    {channels.map(({ id, channel }) => (\r\n                        <SidebarChannel key={id} id={id} channelName={channel.channelName} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon\r\n                    className=\"sidebar__voiceIcon\"\r\n                    fontSize=\"large\"\r\n                ></SignalCellularAltIcon>\r\n\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar onClick={() => auth.signOut()} src={user.photo} />\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0, 5)}</p>\r\n                </div>\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadSetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport \"./ChatHeader.css\"\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport EditLocationRoundedIcon from \"@material-ui/icons/EditLocationRounded\";\r\nimport PeopleAltRoundedIcon from \"@material-ui/icons/PeopleAltRounded\";\r\nimport SearchRoundedIcon from \"@material-ui/icons/SearchRounded\";\r\nimport SendRoundedIcon from \"@material-ui/icons/SendRounded\";\r\nimport HelpRoundedIcon from \"@material-ui/icons/HelpRounded\";\r\n\r\n\r\nfunction ChatHeader({ channelName }) {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3><span className=\"chatHeader__hash\">#</span>{channelName}</h3>\r\n            </div>\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon></NotificationsIcon>\r\n                <EditLocationRoundedIcon />\r\n                <PeopleAltRoundedIcon />\r\n\r\n                <div className=\"chatHeader__search\">\r\n                    <input placeholder=\"Search\" />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import React from 'react'\r\nimport \"./Message.css\"\r\nimport { Avatar } from \"@material-ui/core\"\r\n\r\nfunction Message({ timestamp, message, user }) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message__info\">\r\n                <h4>{user.displayName}\r\n                    <span className=\"message__timestamp\">{new Date(timestamp?.toDate()).toUTCString()}</span>\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport \"./Chat.css\"\r\nimport ChatHeader from \"./ChatHeader\"\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\"\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\"\r\nimport GifIcon from \"@material-ui/icons/Gif\"\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\"\r\nimport Message from \"./Message\"\r\nimport { selectUser } from './features/userSlice'\r\nimport { selectChannelId, selectChannelName } from './features/appSlice'\r\nimport { useSelector } from \"react-redux\"\r\nimport { useState, useEffect } from \"react\"\r\nimport db from \"./firebase\"\r\nimport firebase from \"firebase\"\r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection('channels').doc(channelId).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => (\r\n                setMessages(snapshot.docs.map(doc => doc.data()))\r\n            ));\r\n        }\r\n\r\n    }, [channelId])\r\n\r\n    const sendMessage = e => {\r\n        e.preventDefault();\r\n        db.collection('channels').doc(channelId).collection('messages').add({\r\n            message: input,\r\n            user: user,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        });\r\n        setInput(\"\");\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={channelName} />\r\n\r\n            <div className=\"chat__messages\">\r\n                {messages.map(\r\n                    (message) => (\r\n                        <Message timestamp={message.timestamp} message={message.message} user={message.user}></Message>\r\n                    )\r\n                )}\r\n            </div>\r\n            <div className=\"chat__input\">\r\n                <AddCircleIcon fontSize=\"large\" />\r\n                <form>\r\n                    <input value={input} disabled={!channelId} onChange={e => setInput(e.target.value)} placeholder={`Message #${channelName}`} />\r\n                    <button className=\"chat__inputButton\" onClick={sendMessage} type='submit'>Send Message</button>\r\n                </form>\r\n\r\n                <div className=\"chat__inputIcons\">\r\n                    <CardGiftcardIcon fontSize=\"large\" />\r\n                    <GifIcon fontSize=\"large\" />\r\n                    <EmojiEmotionsIcon fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export default __webpack_public_path__ + \"static/media/discord-logo.9b66ac29.png\";","import React from 'react';\nimport \"./Login.css\";\nimport { Button } from \"@material-ui/core\";\nimport Logo from \"./images/discord-logo.png\";\nimport { auth, provider } from \"./firebase\";\n\nfunction Login() {\n\n    const signIn = () => {\n        auth.signInWithPopup(provider)\n            .catch(error => alert(error.message))\n    };\n\n    return (\n        <div className=\"login\">\n            <div className=\"login__logo\">\n                <img src={Logo} alt=\"\" />\n            </div>\n\n            <Button onClick={signIn}>Sign In</Button>\n        </div>\n    )\n}\n\nexport default Login\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport './App.css';\r\nimport Sidebar from './Sidebar';\r\nimport Chat from \"./Chat\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport Login from \"./Login\";\r\nimport { auth } from './firebase';\r\nimport { login, logout } from \"./features/userSlice\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      console.log(\"user is \", authUser);\r\n      if (authUser) {\r\n        dispatch(login({\r\n          uid: authUser.uid,\r\n          photo: authUser.photoURL,\r\n          email: authUser.email,\r\n          displayName: authUser.displayName,\r\n        }))\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      { user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) : (\r\n          <Login />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}